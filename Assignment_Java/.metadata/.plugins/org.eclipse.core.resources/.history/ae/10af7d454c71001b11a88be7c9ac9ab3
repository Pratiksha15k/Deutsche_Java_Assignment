package com.store.trade.service.impl;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import com.store.trade.bean.Trade;
import com.store.trade.dao.TradeDao;
import com.store.trade.exception.TradeException;
import com.store.trade.service.TradeService;

@Service
public class TradeServiceImpl implements TradeService{

	@Qualifier("TradeDAOMap")
	@Autowired
	TradeDao tradeDao;
	
	@Override
	public boolean isValid(Trade trade) throws TradeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void validateVersion(Trade trade) throws TradeException {
		Trade oldTrade = tradeDao.findTrade(trade.getTradeID(), trade.getVersion());
		if(oldTrade!=null) {
			if(trade.getVersion() == oldTrade.getVersion()){
				tradeDao.updateTrade(oldTrade, trade);
	        }else if(trade.getVersion() > oldTrade.getVersion()){
	        	tradeDao.addTrade(trade);
	        }else {
	        	throw new TradeException("Already existing trade having lower version not accepted.");
	        }
		}
	}

	@Override
	public boolean validateMaturityDate(Trade trade) throws TradeException {
		return trade.getMaturityDate().isBefore(LocalDate.now()) ? false : true;
	}

	@Override
	public void addTrade(Trade trade) throws TradeException {
		if(trade.getCreatedDate()==null)
			trade.setCreatedDate(LocalDate.now());
		if(validateMaturityDate(trade)) {
			tradeDao.addTrade(trade);
		}else {
			throw new TradeException("Trade with less maturity date that today's date is allowed.");
		}
	}

	@Override
	public List<Trade> findAll() throws TradeException {
		return tradeDao.findAll();
	}

	@Override
	@Scheduled(cron = "${trade.expiry.time}")//currentlly setup 30 min
	public void updateExpiryFlagOfTrade() throws TradeException {
		try {
			tradeDao.findAll().forEach(x->{
				try {
					if(!validateMaturityDate(x)) {
						
					}
				} catch (TradeException e) {
					e.printStackTrace();
				}
			});
		}catch(Exception e) {
			
		}
	}

	@Override
	public Trade findTrade(String tradeId, int version) throws TradeException {
		return tradeDao.findTrade(tradeId, version);
	}

}
